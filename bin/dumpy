#!/usr/bin/env bun

/// <reference types="bun-types" />

import { spawn } from "child_process"
import { join } from "path"
import { access, constants } from "fs/promises"

const HELP_TEXT = `
Usage: dumpy <command> [options]

Commands:
  write, w   Write a new thought (dumpy-write)
  read, r    Read your thoughts (dumpy-read)
  think, t   Get insights about your thoughts (dumpy-think)

Examples:
  dumpy write 30    Write with 30s timer
  dumpy read 5      Read last 5 entries
  dumpy think       Analyze your thoughts
`

async function spawnCommand(cmd: string, args: string[] = []): Promise<number> {
  const proc = spawn(cmd, args, { 
    stdio: 'inherit',
    env: process.env
  })

  return new Promise((resolve) => {
    proc.on('exit', (code) => resolve(code ?? 1))
  })
}

async function getBinPath(): Promise<string> {
  const possiblePaths = [
    process.env.HOMEBREW_PREFIX && join(process.env.HOMEBREW_PREFIX, 'opt', 'dumpy', 'bin'),
    '/opt/homebrew/opt/dumpy/bin',
    '/usr/local/opt/dumpy/bin',
    join(process.cwd(), 'bin')
  ].filter(Boolean) as string[]

  for (const binPath of possiblePaths) {
    try {
      await access(binPath, constants.F_OK)
      return binPath
    } catch {}
  }

  throw new Error('Binary directory not found')
}

async function isExecutable(path: string): Promise<boolean> {
  try {
    await access(path, constants.F_OK | constants.X_OK)
    return true
  } catch {
    return false
  }
}

async function main() {
  const [cmd, ...args] = process.argv.slice(2)

  if (!cmd || cmd === '-h' || cmd === '--help') {
    console.log(HELP_TEXT)
    process.exit(0)
  }

  const binPath = await getBinPath()
  const cmdMap = {
    'write': 'dumpy-write',
    'w': 'dumpy-write',
    'read': 'dumpy-read',
    'r': 'dumpy-read',
    'think': 'dumpy-think',
    't': 'dumpy-think'
  } as const

  const binary = cmdMap[cmd as keyof typeof cmdMap]
  if (!binary) {
    console.error(`Unknown command: ${cmd}`)
    console.log(HELP_TEXT)
    process.exit(1)
  }

  const fullPath = join(binPath, binary)
  if (!await isExecutable(fullPath)) {
    console.error(`Command not found: ${cmd}`)
    process.exit(1)
  }

  const exitCode = await spawnCommand(fullPath, args)
  process.exit(exitCode)
}

try {
  await main()
} catch (e) {
  console.error('Error:', e)
  process.exit(1)
}
