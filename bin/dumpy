#!/usr/bin/env bun

/// <reference types="bun-types" />

import { spawn } from "child_process"
import { join } from "path"

const HELP_TEXT = `
Usage: dumpy <command> [options]

Commands:
  write, w   Write a new thought (dumpy-dump)
  read, r    Read your thoughts (dumpy-history)
  think, t   Get insights about your thoughts (dumpy-insight)

Examples:
  dumpy write 30    Write with 30s timer
  dumpy read 5      Read last 5 entries
  dumpy think       Analyze your thoughts
`

async function spawnCommand(cmd: string, args: string[] = []): Promise<number> {
  const proc = spawn(cmd, args, { 
    stdio: 'inherit',
    env: process.env
  })

  return new Promise((resolve) => {
    proc.on('exit', (code) => resolve(code ?? 1))
  })
}

async function getBinPath(): Promise<string> {
  const proc = spawn('which', ['dumpy'], { stdio: 'pipe' })
  
  const output = await new Promise<string>((resolve) => {
    let data = ''
    proc.stdout?.on('data', chunk => data += chunk)
    proc.on('close', () => resolve(data.trim()))
  })

  return join(output, '..')
}

async function main() {
  const [cmd, ...args] = process.argv.slice(2)

  if (!cmd || cmd === '-h' || cmd === '--help') {
    console.log(HELP_TEXT)
    process.exit(0)
  }

  const binPath = await getBinPath()

  switch (cmd) {
    case 'write':
    case 'w':
      await spawnCommand(`${binPath}/write.dumpy`, args)
      break

    case 'read':
    case 'r':
      await spawnCommand(`${binPath}/read.dumpy`, args)
      break

    case 'think':
    case 't':
      await spawnCommand(`${binPath}/think.dumpy`, args)
      break

    default:
      console.error(`Unknown command: ${cmd}`)
      console.log(HELP_TEXT)
      process.exit(1)
  }
}

try {
  await main()
} catch (e) {
  console.error('Error:', e)
  process.exit(1)
}
